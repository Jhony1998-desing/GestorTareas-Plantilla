{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"add-task-container\"\n};\nconst _hoisted_2 = {\n  class: \"input-group\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"task-list\"\n};\nconst _hoisted_4 = {\n  class: \"task-actions\"\n};\nconst _hoisted_5 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[3] || (_cache[3] = _createElementVNode(\"h1\", null, \"Añadir Tarea\", -1)), _createElementVNode(\"div\", _hoisted_2, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newTask = $event),\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $options.addTask && $options.addTask(...args), [\"enter\"])),\n    placeholder: \"Añadir nueva tarea\",\n    class: \"task-input\"\n  }, null, 544), [[_vModelText, $data.newTask]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.addTask && $options.addTask(...args)),\n    class: \"add-button\"\n  }, \"Añadir\")]), $data.newTasks.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.newTasks, task => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: task.id,\n      class: \"task-item\"\n    }, [_createElementVNode(\"span\", {\n      class: _normalizeClass({\n        completed: task.completed\n      })\n    }, _toDisplayString(task.todo), 3), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"button\", {\n      onClick: $event => $options.toggleTaskCompletion(task),\n      class: \"complete-btn\"\n    }, _toDisplayString(task.completed ? 'Desmarcar' : 'Completar'), 9, _hoisted_5)])]);\n  }), 128))])) : _createCommentVNode(\"\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_cache","$event","$data","newTask","onKeyup","_withKeys","args","$options","addTask","placeholder","onClick","newTasks","length","_hoisted_3","_Fragment","_renderList","task","id","_normalizeClass","completed","todo","_hoisted_4","toggleTaskCompletion","_hoisted_5","_createCommentVNode"],"sources":["C:\\Users\\lione\\Downloads\\gestion de planilla\\src\\views\\AddTask.vue"],"sourcesContent":["<template>\n    <div class=\"add-task-container\">\n        <h1>Añadir Tarea</h1>\n        <!-- Campo de entrada para agregar nueva tarea -->\n        <div class=\"input-group\">\n            <input \n                v-model=\"newTask\" \n                @keyup.enter=\"addTask\" \n                placeholder=\"Añadir nueva tarea\" \n                class=\"task-input\"\n            />\n            <button @click=\"addTask\" class=\"add-button\">Añadir</button>\n        </div>\n\n        <!-- Mostrar solo las tareas nuevas -->\n        <div v-if=\"newTasks.length > 0\" class=\"task-list\">\n            <div v-for=\"task in newTasks\" :key=\"task.id\" class=\"task-item\">\n                <span :class=\"{ completed: task.completed }\">{{ task.todo }}</span>\n                <div class=\"task-actions\">\n                    <button @click=\"toggleTaskCompletion(task)\" class=\"complete-btn\">\n                        {{ task.completed ? 'Desmarcar' : 'Completar' }}\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n    name: \"AddTask\",\n    data() {\n        return {\n            newTask: \"\", // Campo de entrada para la nueva tarea\n            newTasks: [], // Lista para las tareas nuevas\n        };\n    },\n    methods: {\n        // Agregar una nueva tarea mediante POST\n        async addTask() {\n            if (this.newTask.trim() === \"\") return;\n\n            try {\n                const response = await axios.post('https://dummyjson.com/todos/add', {\n                    todo: this.newTask,\n                    completed: false,\n                    userId: 1, // Este campo puede cambiar según la API\n                });\n\n                // Agregar la nueva tarea a la lista de tareas nuevas\n                this.newTasks.unshift(response.data);\n                this.newTask = \"\"; // Limpiar el campo de entrada\n            } catch (error) {\n                console.error(\"Error al agregar tarea:\", error);\n                alert(\"No se pudo agregar la tarea.\");\n            }\n        },\n\n        // Cambiar el estado de una tarea\n        toggleTaskCompletion(task) {\n            task.completed = !task.completed;\n        },\n    }\n};\n</script>\n\n<style scoped>\n.add-task-container {\n    padding: 20px;\n    max-width: 400px;\n    margin: 0 auto;\n    font-family: 'Arial', sans-serif;\n    background-color: #f4f7fc;\n    border-radius: 8px;\n}\n\nh1 {\n    text-align: center;\n    color: #4CAF50;\n    margin-bottom: 20px;\n}\n\n.input-group {\n    display: flex;\n    margin-bottom: 10px;\n}\n\n.task-input {\n    flex-grow: 1;\n    padding: 8px;\n    margin-right: 5px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    font-size: 16px;\n}\n\n.add-button {\n    padding: 8px 12px;\n    border: none;\n    border-radius: 4px;\n    background-color: #007bff;\n    color: white;\n    cursor: pointer;\n    font-size: 16px;\n}\n\n.add-button:hover {\n    background-color: #45a049;\n}\n\n.task-list {\n    margin-top: 20px;\n}\n\n.task-item {\n    background-color: #f9f9f9;\n    border: 1px solid #ddd;\n    border-radius: 8px;\n    padding: 15px;\n    width: 100%;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 10px;\n}\n\n.task-actions {\n    display: flex;\n    gap: 10px;\n}\n\n.complete-btn {\n    padding: 5px 10px;\n    border-radius: 5px;\n    background-color: #8BC34A;\n    color: white;\n    cursor: pointer;\n}\n\n.complete-btn:hover {\n    background-color: #7bb53d;\n}\n\n.completed {\n    text-decoration: line-through;\n    color: #888;\n}\n\nspan {\n    font-size: 16px;\n    color: #333;\n    flex-grow: 1;\n}\n</style>\n"],"mappings":";;EACSA,KAAK,EAAC;AAAoB;;EAGtBA,KAAK,EAAC;AAAa;;EAJhCC,GAAA;EAewCD,KAAK,EAAC;;;EAGzBA,KAAK,EAAC;AAAc;mBAlBzC;;uBACIE,mBAAA,CAwBM,OAxBNC,UAwBM,G,0BAvBFC,mBAAA,CAAqB,YAAjB,cAAY,QAEhBA,mBAAA,CAQM,OARNC,UAQM,G,gBAPFD,mBAAA,CAKE;IAVd,uBAAAE,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAMyBC,KAAA,CAAAC,OAAO,GAAAF,MAAA;IACfG,OAAK,EAAAJ,MAAA,QAAAA,MAAA,MAPtBK,SAAA,KAAAC,IAAA,KAO8BC,QAAA,CAAAC,OAAA,IAAAD,QAAA,CAAAC,OAAA,IAAAF,IAAA,CAAO;IACrBG,WAAW,EAAC,oBAAoB;IAChCf,KAAK,EAAC;gCAHGQ,KAAA,CAAAC,OAAO,E,GAKpBL,mBAAA,CAA2D;IAAlDY,OAAK,EAAAV,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAEC,QAAA,CAAAC,OAAA,IAAAD,QAAA,CAAAC,OAAA,IAAAF,IAAA,CAAO;IAAEZ,KAAK,EAAC;KAAa,QAAM,E,GAI3CQ,KAAA,CAAAS,QAAQ,CAACC,MAAM,Q,cAA1BhB,mBAAA,CASM,OATNiB,UASM,I,kBARFjB,mBAAA,CAOMkB,SAAA,QAvBlBC,WAAA,CAgBgCb,KAAA,CAAAS,QAAQ,EAAhBK,IAAI;yBAAhBpB,mBAAA,CAOM;MAPyBD,GAAG,EAAEqB,IAAI,CAACC,EAAE;MAAEvB,KAAK,EAAC;QAC/CI,mBAAA,CAAmE;MAA5DJ,KAAK,EAjB5BwB,eAAA;QAAAC,SAAA,EAiB2CH,IAAI,CAACG;MAAS;wBAAOH,IAAI,CAACI,IAAI,OACzDtB,mBAAA,CAIM,OAJNuB,UAIM,GAHFvB,mBAAA,CAES;MAFAY,OAAK,EAAAT,MAAA,IAAEM,QAAA,CAAAe,oBAAoB,CAACN,IAAI;MAAGtB,KAAK,EAAC;wBAC3CsB,IAAI,CAACG,SAAS,kCApBzCI,UAAA,E;iBAAAC,mBAAA,W","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}